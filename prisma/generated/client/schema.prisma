// prisma/schema.prisma
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

model Account {
  id                 String   @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 Int          @id @default(autoincrement())
  createdAt          DateTime     @default(now())
  accounts           Account[]
  sessions           Session[]
  phoneNumber        String?
  username           String?
  //chat related data
  country            String?
  image              String?
  status             String?
  email              String       @unique
  ads                Ad[]
  favoriteAds        FavoriteAd[]
  shop               Shop[]
  subscription       Subscription?
  following          Follow[]         @relation("UserFollowing")
  followers          Follow[]         @relation("UserFollowers")
  ratings            Rating[]         // Ratings provided by the user
  ratedUsers         Rating[]         @relation("UserRatings") // Users rated by this user
  //chat related data
  chats              Chat[]
  messagesSent       Message[]    @relation("sentMessages")
  messagesReceived   Message[]    @relation("receivedMessages")

  //job site related data
  company            Company?    

  jobApplications    JobApplication[]  
  cvUrl              String?
  jobTitle           String?
  about              String?
  website            String?
  yearsOfExperince   Int?
  age                Int?
  workExperiences    WorkExperience[]
  educations         Education[]
  certifications     Certification[]
  trainings          Training[] 
  skills             String?
  activites          String?
  languages          String?
  notifications      Notification[]
}

model JobApplication {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      
  jobPost     JobPost  @relation(fields: [jobId], references: [id]) 
  jobId       Int      
  appliedAt   DateTime @default(now())
  cvUrl       String?
  coverLetter String?
  status      String   @default("pending") 
}
model WorkExperience {
  id                  Int        @id @default(autoincrement())
  userId              Int
  experienceType      String?
  jobTitle            String?
  companyName         String?
  dateRange           String?
  currentlyWorking    Boolean?
  remote              Boolean?
  description         String?
  country             String?
  company             String?
  // Relationships
  user                User       @relation(fields: [userId], references: [id])
}
model Education {
  id                   Int        @id @default(autoincrement())
  userId               Int
  institutionName      String?
  degree               String?
  fieldOfStudy         String?
  startDate            DateTime?
  endDate              DateTime?
  description          String?

  // Relationships
  user                 User       @relation(fields: [userId], references: [id])
}
model Certification {
  id                   Int        @id @default(autoincrement())
  userId               Int
  certificationName    String?
  issuer               String?
  issueDate            DateTime?
  expirationDate       DateTime?
  description          String?
  // Relationships
  user                 User       @relation(fields: [userId], references: [id])
}
model Training {
  id                   Int        @id @default(autoincrement())
  userId               Int
  trainingName         String?
  organization         String?
  startDate            DateTime?
  endDate              DateTime?
  description          String?
  // Relationships
  user                 User       @relation(fields: [userId], references: [id])
}
model Subscription {
  id                 Int          @id @default(autoincrement())
  endpoint           String
  p256dh             String
  auth               String
  userId             Int?          @unique
  user               User?         @relation(fields: [userId], references: [id])
}
model Company {
  id                 Int       @id @default(autoincrement())
  name               String
  description        String
  phone              String
  industry           String
  city               String
  logoUrl            String?
  jobPosts           JobPost[]
  user               User       @relation(fields: [userId], references: [id]) 
  userId             Int        @unique
}
model JobPost {
  id                 Int       @id @default(autoincrement())
  title              String
  company            Company   @relation(fields: [companyId], references: [id])
  companyId          Int
  description        String
  city               String?
  jobCategory        String
  salary             String?
  experience         String
  applicantsCount    Int?
  postedAt           DateTime @default(now())
  careerLevel        String?
  languages          String?
  nationality        String?
  benefits           String?
  skills             String?
  gender             String?
  employmentType     String?
  educationLevel     String?
  cvRequired         Boolean?
  requirements       String?
  JobApplications    JobApplication[]
}

model Shop {
  id                  Int      @id @default(autoincrement())
  user                User     @relation(fields: [userId], references: [id])
  userId              Int      
  shopCategory        String   @default("cars")
  shopName            String  
  city                String?  
  bgColor             String?  
  country             String?  
  bgImage             String  @default("https://cloud.elsewedy-automation.com/nextcloud/apps/sharingpath/mahm0ud/upload/Rectangle%2023787.png")
  shopImage           String?  
  description         String?  
  facebookLink        String?
  twitterLink         String?
  instagramLink       String?
  tiktokLink          String?
  snapchatLink        String?
  phoneNumber1        String?
  phoneNumber2        String?
  ads                 Ad[]
  followers           Follow[] @relation("ShopFollowers")
  ratings             Rating[]
  chats               Chat[]
  sentMessages      Message[] @relation("sentShopMessages")
  receivedMessages  Message[] @relation("receivedShopMessages")
}

model Chat {
  id          Int       @id @default(autoincrement())
  users       User[]    
  shops       Shop[]     
  messages    Message[] 
}

model Message {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  content       String
  read          Boolean   @default(false)
  notification  Notification? 
  notificationId Int?      @unique
  chat          Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId        Int
  senderShop    Shop?     @relation("sentShopMessages", fields: [shopId], references: [id])
  receiverShop  Shop?     @relation("receivedShopMessages", fields: [shopId], references: [id])
  shopId        Int?

  sender        User?     @relation("sentMessages", fields: [senderId], references: [id]) 
  receiver      User?     @relation("receivedMessages", fields: [receiverId], references: [id])
  senderId      Int?
  receiverId    Int?
}

model Notification {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  content     String
  read        Boolean   @default(false)
  message     Message?   @relation(fields: [messageId], references: [id])
  messageId   Int?       @unique
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId Int
}

model Follow {
  id              Int      @id @default(autoincrement())
  follower        User     @relation(name: "UserFollowing", fields: [followerId], references: [id])
  followerId      Int
  followedUser    User?    @relation(name: "UserFollowers", fields: [followedUserId], references: [id])
  followedUserId  Int?
  followedShop    Shop?    @relation(name: "ShopFollowers", fields: [followedShopId], references: [id])
  followedShopId  Int?
  @@unique([followerId, followedUserId])
  @@unique([followerId, followedShopId])
}

model Rating {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id]) // User who provided the rating
  userId        Int      // ID of the user who provided the rating
  ratedUser     User     @relation("UserRatings", fields: [ratedUserId], references: [id]) // User being rated
  ratedUserId   Int      // ID of the user being rated
  shop          Shop?    @relation(fields: [shopId], references: [id]) // Shop being rated
  shopId        Int?     // ID of the shop being rated
  rating        Float    // The actual rating value
  createdAt     DateTime @default(now())

  @@unique([userId, ratedUserId]) 
}

model Image {
  id   Int    @id @default(autoincrement())
  url  String
  ad   Ad     @relation(fields: [adId], references: [id])
  adId Int
}

model Ad {
  id                     Int          @id @default(autoincrement())
  user                   User?        @relation(fields: [userId], references: [id])
  userId                 Int?
  shop                   Shop?        @relation(fields: [shopId], references: [id])
  shopId                 Int?
  createdAt              DateTime     @default(now())
  Adimages               Image[]
  description            String?
  country                String?
  color                  String?
  brand                  String
  EnginCapacity          String
  category               String
  carType                String
  model                  String
  year                   String
  carStatus              String
  transmission           String
  fuelType               String
  meterRange             String
  paintType              String
  payment                String
  price                  String
  name                   String
  RegionalSpecifications String
  city                   String?
  CarChassis             String?
  extraFeatures          String?
  adStatus               String       @default("active")
  favoritedBy            FavoriteAd[]
  views                  Int          @default(0)
  clicks                 Int          @default(0)
}

model FavoriteAd {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  ad        Ad       @relation(fields: [adId], references: [id])
  adId      Int
  createdAt DateTime @default(now())
}

